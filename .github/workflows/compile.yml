name: "Continuous Deployment"

on:
  workflow_dispatch:
    inputs:
      release:
        description: "release build"
        required: false
        type: boolean
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

jobs:
  build-frontend:
    name: frontend cd
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: "Cache"
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin/trunk
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            target
          key: frontend-${{ hashFiles('**/Cargo.lock') }}

      - name: "install toolchain"
        uses: actions-rs/toolchain@v1
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          toolchain: stable
          override: true

      - name: "install toolchain"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: false

      - name: "install trunk"
        if: steps.cache.outputs.cache-hit != 'true'
        run: cargo install trunk

      - name: build
        run: trunk build --release
        working-directory: frontend

      - name: upload frontend
        uses: actions/upload-artifact@v3
        with:
          name: frontend
          path: ./frontend/dist/*

  build-backend:
    name: backend cd for ${{ matrix.job.arch }}
    needs: build-frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        job:
          #- target: x86_64-unknown-linux-gnu
          #  arch: amd64
          #  foreign: false
          - target: aarch64-unknown-linux-gnu
            arch: arm64
            foreign: true
    steps:
      - uses: actions/checkout@v2

      - name: "Cache"
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.rustup/toolchains/${{ matrix.job.target }}
            ~/.rustup/update-hashes/${{ matrix.job.target }}
            target
          key: backend-${{ matrix.job.arch }}-${{ hashFiles('**/Cargo.lock') }}-2

      - name: "install toolchain"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
          override: true

      - name: "add ${{ matrix.job.arch }} as a foreign architecture"
        if: ${{ matrix.job.foreign }}
        run: |
          dpkg --add-architecture ${{ matrix.job.arch }}
          sudo touch /etc/apt/sources.list.d/arm-cross-compile-sources.list
          sudo cp ./scripts/arm-cross-compile-sources.list /etc/apt/sources.list.d/arm-cross-compile-sources.list
          sed "s/deb/deb [arch=amd64]/" /etc/apt/sources.list | sudo tee /etc/apt/sources.list

      - name: "install aptitude"
        run: |
          sudo apt update
          sudo apt-get install -y aptitude apt-utils

      - name: "install build dependances"
        run: |
          sudo aptitude install -fvy libv4l-dev:${{ matrix.job.arch }} libclang-dev:${{matrix.job.arch}} gcc-arm-linux-gnueabihf
          find /usr/lib/ -name "libclang.so" -or -name "libclang-*.so" -or -name "libclang.so.*" -or -name "libclang-*.so.*"

          # 11/28/22 going to sleep 2nite
          # current status so i dont forget.
          # apitude says 2 packages are not installable:
          # libclang-dev:armhf : Depends: libclang-10-dev:armhf (>= 10~) but it is not installable
          #  libv4l-dev:armhf : Depends: libv4l-0:armhf (= 1.18.0-2build1) but it is not installable
          #                     Depends: libv4lconvert0:armhf (= 1.18.0-2build1) but it is not installable
          #                     Depends: libv4l2rds0:armhf (= 1.18.0-2build1) but it is not installable
          # it then installs gcc so it looks like its doing something
          # but in reality it just skips liblang anb v4l
          # libclang is nowhere to be seen, and is suspect that libv4l is the same
          # nada is the same issue. installing the clang bin does nothing
          # using cross just takes me back to square one.
          # i think i need to make another forum post
          #
          # this has been single worst bug i have ever enountered
          # its probobly childsplay for some but i cant figure it out
      - name: "compile backend"
        uses: actions-rs/cargo@v1
        with:
          #use-cross: true
          command: build
          args: --release --target=${{ matrix.job.target }} --bin backend

      - name: create pkg structure
        run: |
          mkdir -p .debpkg/usr/bin
          mkdir -p .debpkg/usr/lib/wifi-car
          mkdir -p .debpkg/etc/systemd/system
          mkdir -p .debpkg/DEBIAN

          mv ./target/${{ matrix.job.target }}/release/backend .debpkg/usr/local/bin/wifi-car
          cp scripts/wifi-car.service .debpkg/etc/systemd/system/
          cp scripts/postinst.sh .debpkg/DEBIAN/postinst
          cp scripts/preinst.sh .debpkg/DEBIAN/preinst

      - uses: actions/download-artifact@v3
        with:
          name: frontend
          path: .debpkg/usr/lib/wifi-car/

      - uses: jiro4989/build-deb-action@v2
        with:
          package: wifi-car
          package_root: .debpkg
          maintainer: makerio
          version: "0.0.0"
          arch: ${{ matrix.job.arch }}
          depends: "libv4l-dev, systemd"
          desc: "lets you controll an rc car over the internet"
          priority: "Extra"

      - name: get pkg
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.job.arch }}-deb-pkg
          path: ./*.deb
